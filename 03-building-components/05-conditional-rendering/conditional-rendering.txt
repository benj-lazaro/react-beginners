Conditional Rendering
---------------------
- To render a list of items dynamically based on certain conditions


- In the example code
    - Declare a conditional statement
    - If the condition is true or false
    - Render the corresponding list with the header intact


- Using an if statement
    - Declare an if statement
        - Outside the JSX mark-up of the <ListGroup /> component
    
    - Implement the conditional logic and corresponding result

        if (items.length === 0)
            return (
                <>
                    <h1>List</h1>

                    <p>No item found</p>
                </>
            );

        return (
            // Fragment implementation
            <>
                <h1>List</h1>

                <ul className="list-group">
                    {items.map((item) => (
                    <li key={item}>{item}</li>
                    ))}
                </ul>
            </>
        );

    - This implementation, renders two JSX element <h1> that serves the same purpose (i.e. list header)
         - Resulting to code duplication


- Using a ternary operator
    - Declare a pair of { } 
        - Inside the JSX mark-up of the <ListGroup /> component
        - Preceeding the JSX element <ul>

    - Declare a the conditional statement and corresponding result

        return (
            // Fragment implementation
            <>
                <h1>List</h1>

                {/* Conditional rendering using a ternary operator */}
                {items.length === 0 ? <p>No items found</p> : null}

                <ul className="list-group">
                    {items.map((item) => (
                    <li key={item}>{item}</li>
                    ))}
                </ul>
            </>
        );

    - Susceptible of "polluting" the JSX mark-up
        - If the implemented logic of the ternary operator becomes complicated

    - To address this concern
        - Move the ternary operator's logic into a constant outside the JSX mark-up
        - Replace the content of the { } by referencing the name of the content

            const message = items.length === 0 ? <p>No items found</p> : null;
        
            return (
                // Fragment implementation
                <>
                    <h1>List</h1>

                    {/* Conditional rendering using a ternary operator stored in a constant */}
                    {message}

                    <ul className="list-group">
                        {items.map((item) => (
                        <li key={item}>{item}</li>
                        ))}
                    </ul>
                </>
            );


    - An alternative approach is moving the ternary operator's logic in an arrow function
        - The benefit of this approach is that a function can have parameters
        - It can render different messages based on different conditions

            const getMessage = () => (items.length === 0 ? <p>No items found</p> : null);

            return (
                // Fragment implementation
                <>
                    <h1>List</h1>

                    {/* Conditional rendering using a ternary operator stored in a constant */}
                    {message}

                    <ul className="list-group">
                        {items.map((item) => (
                        <li key={item}>{item}</li>
                        ))}
                    </ul>
                </>
            );


- Using the && operator (Logical AND)
    - The COMMON TECHNIQUE of rendering dynamic content conditionally

    - Declare a pair of { } 
        - Inside the JSX mark-up of the <ListGroup /> component
        - Preceeding the JSX element <ul>

    - Declare the conditional statement and corresponding result
        - If the conditional statement evaluates to "true" (1st operand)
        - The 2nd operand is returned

        - If the conditional statement evaluates to "false" (1st operand)
        - The entire expression evaluates to "false"
        - No list will be rendered

            return (
                // Fragment implementation
                <>
                <h1>List</h1>

                {/* Conditional rendering using a Logical AND operator */}
                {items.length === 0 && <p>No items found</p>}

                <ul className="list-group">
                    {items.map((item) => (
                    <li key={item}>{item}</li>
                    ))}
                </ul>
                </>
            );