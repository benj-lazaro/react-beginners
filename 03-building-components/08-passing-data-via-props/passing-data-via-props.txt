Passing Data via Props
----------------------
- Instead creating another React component for the same purpose (e.g. list of items)
    - Make the component reusable
        - By making it able to accept different types of items
        - Then render a list from it

    - This is made possible through the use of props (or properties)
        - These props serve as an input to a React component
        - Think of them in the similar vein as parameter variable(s) of a function


- In the example code
    - Instead of defining the array and JSX mark-up for the list heading w/in the component

        let items = ["New York", "San Francisco", "Tokyo", "London", "Paris"];
        ...
        return (
            // Fragment implementation
            <>
            <h1>List</h1>
            ...
        )

    - They should be passed as "input" to the <ListGroup /> component


- First decide the "shape" of the input to the component
    - For the <ListGroup /> component, it expects to receive an object w/ two (2) props
        - items     = an array of strings
        - heading   = a string for the list heading


- To implement the "shape" of the <ListGroup /> component's input object
    - Use the TypeScript's feature called an "interface"

    - The "interface" defines the "shape" or interface of the component's input object

        Syntax:

        interface <name_of_component_interface> {
            ...
        }

    - Declare an "interface" outside the <ListGroup /> component's JSX mark-up
        - By convention, the name "Props" is used
        - Alternatively, "Props" is prefixed with the component's name (e.g. ListGroupProps)

    - Inside the body of the inteface
        - Define the input object's props (ListGroupProps) name & data type
        - Each prop definition is terminated by an ;

            // Component interface
            interface Props {
                items: string[];
                heading: string;
            }


- Move to the declaration of the function "ListGroup()"
    - Define a parameter variable named "props" with the data type of "Props"

        function ListGroup(props: Props) {
            ...
        }

    - Save the changes
        - The <App /> component (App.tsx) reports an TypeScript compilation error

            Type "{}" is missing the following properties from type "Props": items, heading

        - TypeScript is saying that the imported <ListGroup /> component
            - Is expecting two properties named "items" and "heading" as input
            - These props have NOT been specified yet inside the <App /> component

            function App() {

                return (
                    <div>
                        <ListGroup /> // Warning on this line
                    </div>
                );
            }


- To address the reported warning
    - Move back to the <ListGroup /> component (ListGroup.tsx)
        - Select the array declaration saved into the constant named "items"
        - Cut the entire array declaration 
        
    - Switch back to the <App /> component (App.tsx)
        - Within the declaration of the function "App()"
        - Paste the array declaration on the line above the component's JSX mark-up

    - On the <App /> component's JSX mark-up
        - Declare a property named "items" on the imported <ListGroup /> component
            - Assign an object as value
            - Inside the object is a reference to the constant "items" that stores the array

        - Declare a 2nd property named "heading"
            - Assign a static string "Cities" as value

            function App() {
                let items = ["New York", "San Francisco", "Tokyo", "London", "Paris"];

                return (
                    <div>
                        <ListGroup items={items} heading="Cities" />
                    </div>
                );
            }

    - Moving back to the <ListGroup /> component (ListGroup.tsx)
        - With the reference to the array declaration moved into the <App /> component
            - Triggers a TypeScript compilation error

                Cannot find name "items"
        
        - A solution is to prefix each instance of "items" with the parameter variable "props"
            - e.g. props.items
            - This works BUT makes the code repetitive and ugly

        - A BETTER SOLUTION is to
            - Destructure the input object to be received from the <App /> component
            - Replace the parameter variable "props" with the input object's individual properties

                function ListGroup({items, heading}: Props) {
                    ...
                }
            
            - This grants the <ListGroup /> component access to the input object's properties

    - On the <ListGroup /> component's JSX mark-up
        - Replace the hard-coded content of the JSX element <h1>
            - With an object referencing the input object's property named "heading"

                function ListGroup({ items, heading }: Props) {
                    // Deconstruct the returned array from useState()
                    const [selectedIndex, setSelectedIndex] = useState(-1);

                    return (
                        // Fragment implementation
                        <>
                            <h1>{heading}</h1>
                            ...
                    )
                }
        
        - Save the changes
