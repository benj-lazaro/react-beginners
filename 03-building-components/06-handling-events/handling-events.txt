Handling Events
---------------
- In React, each JSX element has a property (or prop) called "onClick"
    - Often assigned with an arrow function enclosed w/in a pair of { }

    - For this example code
        - Declare the property "onClick" on the JSX element <li>
        - Assign an arrow function with NO parameters
        - It returns the message "Clicked" on the JavaScript console

            <li
                className="list-group-item"
                key={item}
                onClick={() => console.log("Clicked.")}
            >
                {item}
            </li>


- In order to identify which JSX element that was clicked
    - In the example code
        - The parameter variable "item" was passed as argument to the ".map()" method
            - This variable "item" holds the current item from the array

            - This value is used in the "key" property of the JSX <li> element
                - In order for React to identify which array item the rendered JSX <li> element belongs to

            - In the arrow function
                - Replace the string content of the console.log()
                - With the variable parameter "item"

            <li
                className="list-group-item"
                key={item}
                onClick={() => console.log(item)}
            >
                {item}
            </li>


- When using the method ".map()"
    - Besides the parameter variable that holds the current item of an iterable (e.g. array)
    
    - Optionally passing a 2nd parameter variable named "index"
        - Returns the index value of the associated item currently stored in the parameter variable "item"


- The arrow function can optionally have a parameter named "e" (or "event")
    - This represent a browser's "event object"

    - This object has a data type of "SyntheticBaseEvent"
        - This is a built-in class in React
        
        - It functions as a cross-browser wrapper to each browser's native event object
            - Each browser has their own implementation of the event object
    
    - Commonly used properties of the "e" (i.e. event) object
        - Property named "type"     = Identifies the type of event
        - Property named "target"   = Identifies the associated JSX element where the event occured

    - IMPORTANT: When the logic of the arrow function becomes complex
        - It is best to move the logic into a separate function
            - Prefix the name of the function with "handle" 
            - Followed by the type of event (i.e. click)
        - This function is now referred as an "Event Handler"

        - Then reference the Event Handler in the JSX element's property "onClick"

    - In example code
        - Create a constant named "handleClick"
            - This is an "Event Handler"
        
        - Copy the logic of the arrow function assigned in the property "onClick" to this Event Handler
        
            const handleClick = (event) => console.log(event);

        - The parameter variable "event" in the moved logic triggered a TypeScript compiler error

            Parameter "event" implicity has an "any" type

        - React does NOT know the data type of value inside the parameter variable "event"
            - Hovering a mouse over the parameter variable "event" on the original line of code
            - Returns the data type "React.MouseEvent"

        - Refactor the parameter variable "event" by adding its data type "React.MouseEvent"
            - This action is referred to as "Type Annotation" in TypeScript
            - It specifies the data type of variables, parameters and so on

            const handleClick = (event: React.MouseEvent) => console.log(event);            


        - Alternatively, the data type of the parameter variable "event" can be shortened
            - By importing "MouseEvent" directly from the React library
            - Use the "import" statement outside the component's function declaration
            - Import "MouseEvent"
            - Refactor the parameter variable "event" data type from "React.MouseEvent" to "MouseEvent"
    
            import { MouseEvent } from "react";
            ...
            const handleClick = (event: MouseEvent) => console.log(event); 


        - Back to the "onClick" property of the JSX <li> element
            - Remove the arrow function's inline logic
            - Replace it with a reference the Event Handler "handleClick"
            
            <li className="list-group-item" key={item} onClick={handleClick}>
                {item}
            </li>
