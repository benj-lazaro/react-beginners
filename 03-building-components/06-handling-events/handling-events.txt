Handling Events
---------------
- In React, each JSX element has a property (or prop) called "onClick"
    - Often assigned with an arrow function enclosed w/in a pair of { }


- In the example code
    - Declare the property "onClick" in the JSX element <li>
    - Then assign an arrow function with NO parameters
    - That returns the message "Clicked" on the browser's JavaScript console

        <li
            className="list-group-item"
            key={item}
            onClick={() => console.log("Clicked.")}
            >
            {item}
        </li>


- In order for React to identify which JSX <li> element was clicked in the example code
    - Use the parameter variable "item" 
        - That was previously passed as an argument to the ".map()" method
            - As it references the current item that is read from the array

        - This was also the same parameter variable used for the property "key" 
            - That helped React identify which array item that the rendered JSX <li> element belongs to
    
    - In the arrow function's logic
        - Replace the string content of the console.log()
        - With the parameter variable "item"

        <li
            className="list-group-item"
            key={item}
            onClick={() => console.log(item)}
            >
            {item}
        </li>


    - Clicking the rendered JSX <li> element on the browser
        - Displays the corresponding name of array item in the browser's JavaScript


- NOTE: When working with the method ".map()"
    - It can optionally accept a 2nd parameter variable named "index"
    - It returns the index value of the associated value stored in the 1st parameter variable


- The arrow function assigned in the JSX <li> element's property "onClick"
    - Can optionally accept a parameter variable named "e" or "event"
        - This represent the browser's "event object"
        - Every browser has their own event object implementation

    - React has a cross-wrapper wrapper for every browser's native event object
        - This object has the data type of "SyntheticBaseEvent"
        - This is a built-in class in React

    - The commonly referenced properties of this object are:
        - "type" property   = Event type (i.e. click)
        - "target" property = Associated JSX element where the event occured / is triggered


- When the logic of the arrow function assigned to the property "onClick" becomes complex
    - It is best to move it into a separate function

    - The function is to be stored in a constant
        - Prefix the name with "handle"
        - Followed by the event type (e.g. click)
            - e.g. handleClick
    
        - This function will now be referred as an "Event Handler"

    - Replace the logic of the arrow function assigned to the JSX element's "onClick" property
        - By referencing the corresponding Event Handler


- In the example code
    - Declare a constant or more appropriately an Event Handler named "handleClick"

    - Copy the arrow function's logic from the JSX <li> element's property "onClick" to "handleClick"
    
        const handleClick = (event) => console.log(event);


    - The handleClick's parameter variable "event" triggered the following TypeScript compiler error 

        Parameter "event" implicity has an "any" type

        - This is because React does NOT know the data type of the parameter variable "event"
        
        - To identify the data type
            - Hover the mouse over the same parameter variable "event" of the JSX <li> element's property "onClick"

        - It returns the data type of "React.MouseEvent"


    - Refactor handleClick's parameter variable "event" by adding the corresponding data type
        - This action is referred to as "Type Annotation" in TypeScript
        - It specifies the data type of variables, parameters and so on

            const handleClick = (event: React.MouseEvent) => console.log(event); 
    
        - Alternatively, the data type of handleClick's parameter variable "event" can be shortened
            - Import "MouseEvent" from the React library

                import { MouseEvent } from "react";

            - Then refactor the data type of the  handleClick's parameter variable "event"
        
                const handleClick = (event: MouseEvent) => console.log(event); 


    - Back to the JSX <li> element's property "onClick"
        - Remove the arrow function's inline logic
        - Replace it with a reference to the Event Handler "handleClick"
            
            <li className="list-group-item" key={item} onClick={handleClick}>
                {item}
            </li>
