Passing Functions via Props
---------------------------
- The React component <ListGroup /> is in a fairly good shape
    - In a real-world scenario
        - When an item in the list is clicked (and highlighted)
        - A corresponding action is to be expected
        - The action differs from one app to another


- In the example code
    - Implementing the "action" logic inside the <ListGroup /> component
        - Makes this component NOT reusable anymore

    - To address this concern, a mechanism is required to 
        - Notify the consumer or "parent" component (i.e. <App />)
        - That an event in the "child" component (i.e. <ListGroup />) has been triggered


- To implement this mechanism
    - On the <ListGroup /> component's interface "Props"
        - Declare a 3rd property named "onSelectItem"
            - Assign an arrow function
            - With a parameter variable named "item" of data type string
            - And returns void

            // Component interface
                interface Props {
                items: string[];
                heading: string;
                onSelectItem: (item: string) => void;
            }

        - By convention, a property that has the data type of a function
            - It's name begins with the word "on"
            - Followed by the event of event written in PascalCase (e.g. SelectItem)
            - e.g. onSelectItem

    - Save the changes
        - The <App /> component reports a TypeScript compilation error

            Property "onSelectItem" is missing in type "{items: string[], heading: string}" 
            but required in type "Props"

        - TypeScript is saying that the imported <ListGroup /> component
            - The value for the property "onSelectItem" has NOT been specified


- To address this concern
    - Open the <App /? component (App.tsx)
        - Proceed to the component's JSX mark-up

    - On the imported <ListGroup /> component
        - Declare an additional property named "onSelectItem"

            return (
                <div>
                    <ListGroup
                        items={items}
                        heading="Cities"
                        onSelectItem={}
                    />
                </div>
            );

    - Outside the JSX mark-up
        - Declare a constant named "handleSelectItem"

        - Assign an arrow function
            - With a parameter variable named "item" of data type string 
            - It displays the value of the parameter variable "item" on the browser's JavaScript console

        - This function serves as an Event Handler

            // Event handler
            const handleSelectItem = (item: string) => {
                console.log(item);
            };

    - Move to the imported <ListGroup /> component in the JSX mark-up
        - On the property "onSelectItem"
        - Reference the constant named "handleSelectItem" 

            return (
                <div>
                    <ListGroup
                        items={items}
                        heading="Cities"
                        onSelectItem={handleSelectItem}
                    />
                </div>
            );

    - Switch back to the <ListGroup /> component (ListGroup.tsx)
        - On the declaration of the function "ListGroup()"
        - Add the parameter variable named "onSelectItem"
        
            function ListGroup({ items, heading, onSelectItem }: Props) {
                ...
            }
  
    - Move down to the JSX mark-up 
        - On the JSX element <li> property "onClick"
            - Add the reference to the parameter variable "onSelectItem"
            - Pass the parameter variable named "item"

        - The parameter variable "onSelectItem" references a function
            - Defined in the parent component <App />
            - Keeping the <ListGroup /> component reusable
            
            <li
                className={
                selectedIndex === index
                    ? "list-group-item active"
                    : "list-group-item"
                }
                key={item}
                onClick={() => {
                    setSelectedIndex(index);
                    onSelectItem(item);
                }}
            >
                {item}
            </li>

    - Save the changes
        - When an item rendered by the the <ListGroup /> is clicked
        - The corresponding name of the item is displayed on the browser's JavaScript console
