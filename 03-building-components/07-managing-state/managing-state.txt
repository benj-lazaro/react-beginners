Managing State
---------------
- To highlight the clicked item of the <ListGroup /> component
    - Requires using the Bootstrap class "active"
    - Add the class "active" to the JSX element <li> property "className"

        <li
          className="list-group-item active"
          key={item}
          onClick={handleClick}
        >

    - This results to all of the rendered items are highlighted or being "activated"


- To address this issue
    - Requires a variable that keeps track of the selected list item's index value

    - Declare a variable named "selectedIndex"
        - Outside the <ListGroup /> mark-up
            - Succeeding the line after the array declaration

        - Assign an initial value of -1
            - The value of 0 to the 1st item of the array a.k.a list item
            - The value of -1 meant that NO item from the array is selected
        
        let selectedIndex = -1;


- Back in the JSX mark-up
    - Dynamically render the classes assign to the JSX element <li> property "className"
        - Using a ternary operator

    - Declare a pair of { } to the JSX element <li> property "className"

    - Inside declare ternary operator logic
        - If the value of the variable "selectedIndex" === "index"
        - Assign the value of "list-group active" to the property "className"
        - Otherwise assign the value of "list-group" instead

        className={selectedIndex === index ? "list-group-item active" : "list-group-item"}

    - NOTE: This is a simple way of dynamically adding / removing Bootstrap classes


- To implement the logic of updating the value of the variable "selectedIndex"
    - By assigning the rendered item's index value when clicked

    - A simple arrow function is needed to update the variable "selectedIndex"

    - In the JSX element <li> property "onClick"
        - Delete the assigned Event Handler "handleClick"
        - Delete the declared arrow function stored in the constant "handleClick"
        - Delete the "important" statement for the "MouseEvent"

    - Back to the JSX element <li> property "onClick"
        - Declare an inline arrow function with NO parameter variable

    - Inside the inline arrow function
        - Assign the value of the variable "index" to the variable "selectedIndex"

        <li
          className={
            selectedIndex === index
              ? "list-group-item active"
              : "list-group-item"
          }
          key={item}
          onClick={() => (selectedIndex = index)}
        >
          {item}
        </li>

    - Save the changes
        - Clicking a rendered item in the browser does NOT get highlighted
        - The declared variable "selectedIndex" is local ONLY to the <ListGroup /> component
        - React is NOT aware of its existence

    - To addess this concern
        - React NEEDS to be informed that the <ListGroup /> component 
            - Contains data or state that MIGHT change over time

        - This is implemented using React's built-in function named "useState()"

    - To load the built-in function "useState()" in the <ListGroup /> component codebase
        - Type "useS" 
        - Wait for the auto-completion kicks-in and press ENTER
        - Automatically loads the associated "import" statement & completes the function name


- The built-in function "useState()" is specifically referred as a "State Hook"
    - In general, a "hook" is a built-in function 
        - That allows developers to tap into other built-in features of the React library

    - A "State Hook" informs React that the <ListGroup /> component
        - Contains data or state that MIGHT change over time

    - The function "useState()" returns an array containing two (2) elements
        - 1st element   = State variable; stores the initial value or current "state" 
        - 2nd element   = Updater function; updates the value or "state" of the State variable
                        = Informs React on the change of the "state"
                        = React then re-renders the component in the DOM


- Back in the <ListGroup /> component
    - Declare the function "useState()" on the line after the previous variable declaration

    - Pass the value of -1 as argument value
        - This value gets assigned to the 1st element of the function "useState()" returned array

    - Assign the returned array from the function "useState()" to the constant "arr"

        const arr = useState(-1);

    - HOWEVER, it is easier to work with the returned array by deconstructing it into two elements
        - 1st element named as "selectedIndex" (variable where the value of -1 is stored)
        - 2nd element named as "setSelectedIndex" (an updater function)

        const [selectedIndex, setSelectedIndex] = useState(-1);

        - NOTE: This is the convention followed in React applications


- On the JSX element <li> property "onClick"
    - Replace the entire inline arrow function with a call to the State Hook's "updater function"
    
    - Call the updater function "setSelectedIndex" 

    - Pass the parameter variable "index" as argument value

        <li
            className={
              selectedIndex === index
                ? "list-group-item active"
                : "list-group-item"
            }
            key={item}
            onClick={() => setSelectedIndex(index)}
        >
          {item}
        </li>

    - Save the changes
        - When a renedered list element is clicked
        - The updater function "selectedIndex" updates the "state" of the variable "selectedIndex"
    
        - React gets informed of the changes
            - Rre-renders the <ListGroup /> component

            - Corresponding JSX element <li> property "className"
                - Gets assigned with the property Bootstrap classes "list-group-item active"


- NOTE: Each React component has its own state
    - React keeps track of a component's state individually

    - To demonstrate, import two identical <ListGroup /> components in the <App />

        function App() {
            return (
                <div>
                    <ListGroup />
                    <ListGroup />
                </div>
            );
        }


    - After React renders both components in the DOM
        - It independently keeps track of the clicked item on each <ListGroup /> component
