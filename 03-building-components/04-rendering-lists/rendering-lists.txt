Rendering Lists
---------------
- To render a list of items dynamically in the JSX mark-up of the <ListGroup /> component
    - Open the file named "ListGroup.tsx"


- Declare a constant named "items"
    - Assign an array of items
    - Each item has the data type of string
    - This array serves as the source of list items to be generated dynamically in the JSX mark-up
    
        const items = ["New York", "San Francisco", "Tokyo", "London", "Paris"];


- Now JSX does NOT have a for loop 
    - To iterate through the items of the array
        - A different approach is needed

    - In JavaScript, an array has a method ".map()"
        - It iterates through the items of an array
        - Then converts each item into a different type


- To iterate through the items of the array
    - Call the method ".map()" on the array stored in the constant "items"

        items.map()

    - Pass an arrow function as argument to the method ".map()"

    - Declare the parameter variable "item" to the arrow function
        - This holds the current item read from the array

    - In the body of the arrow function
        - Convert each item into its own JSX element <li>
        - Embed the parameter variable "item" w/in a pair of { } as content to the JSX element <li>

        items.map((item) => <li>{item}</li>)

    - NOTE: To render data dynamically in JSX
        - Embed the data source (i.e. constant, variable) w/in a pair of { }


- Going back to the "return" statement of the <ListGroup /> component
    - Delete all of the hard-coded <li> elements
    - Declare a { }   
    - Cut and paste the declared expression involing the method ".map()" w/in the pair of { }

        return (
            // Fragment implementation
            <>
                <h1>List</h1>
                <ul className="list-group">

                    {/* Dynamically renders array items as an unordered list */}
                    {items.map((item) => (
                        <li>{item}</li>
                    ))}

                </ul>
            </>
        );

   - Save the changes
        - The browser dynamically renders a list 
        - Based on the contents of the array stored in the constant "items"

        - HOWEVER, it reported the following JavaScript warning

            Warning: Each child in a list should have a unique "key" prop

        - The warning meant that each JSX element <li> should have with a property "key"
            - The property "key" uniquely identifies an array item

        - React needs the property "key" in order to keep track of each item
            - For adding / removing an item from the list dynamically
            - To know which part of the DOM should be updated (and re-rendered)


- To address the reported warning message
    - Declare the property "key" in the JSX element <li>

    - Assign the parameter variable "item" w/in the pair of { } as value
        - The items in the array are unique string values 
        - Sufficient to be considered as unique identifiers
    
        return (
            // Fragment implementation
            <>
                <h1>List</h1>
                <ul className="list-group">

                    {/* Dynamically renders array items as an unordered list */}
                    {items.map((item) => (
                        <li key={item}>{item}</li>
                    ))}

                </ul>
            </>
        );
    

   - Save the changes
        - The browser dynamically renders a list
        - The JavaScript warning addressed


- On a real-world application where the items are received from a remote API
    - Each item will likely to have a property "id" that contains a unique identification

        return (
            // Fragment implementation
            <>
                <h1>List</h1>
                <ul className="list-group">

                    {/* Dynamically renders array items as an unordered list */}
                    {items.map((item) => (
                        <li key={item.id}>{item}</li>
                    ))}

                </ul>
            </>
        );