Passing Children
----------------
- Sometimes there is a need to pass children to a component
    - The same way how the <ListGroup /> component is passed as a child 
        - To the <App /> component's JSX element <div>
        
            return (
                <div>
                    <ListGroup items={items} heading="Cities" onSelectItem={handleSelectItem} />
                </div>
            );


- Before creating a new React component 
    - Install the VS Code extension
        - "ES7+ React/Redux/React-Native snippets"
        - Published by dsznajde

    - This extension provides a shortcut
        - For creating React components easier and painless

    - To activate after installation
        - Create a new TypeScript file (.tsx)

        - Save using the name of the new React component

        - Inside the blank file
        
        - Type "rafce" and press TAB
            - Returns a boilerplate code with the component's name embedded


- Create a new React component
    - Open the folder "src/components"

    - Create a new TypeScript file (.tsx)
        - Save the file as "Alert.tsx"
        
    - Use the shortcut "rafce"
        - Generates boilerplate code

        - For the example code, there is NO need to import React 
        
        - Remove the corresponding "import" statement

            import React from 'react'
    
    - Save the changes


- Import the <Alert /> component to the <App /> component
    - In the folder  "src"
        - Open the file "App.tsx"

    - Then delete: 
        - The "import" statement for the <ListGroup /> component
        - The array declaration saved in the constant "items"
        - The Event Handler save in the constant "handleSelectItem"
        - The <ListGroup /> component from the JSX element <div>

    - In-between the JSX element <div>
        - Type "<Aler" and press TAB
            - Generates the corresponding "import" statement for the <Alert /> component

        - Complete the component name <Alert />

            import Alert from "./components/Alert";

            function App() {
                return (
                    <div>
                        <Alert />
                    </div>
                );
            }

    - Save the changes
        - Browser renders the string "Alert" in the DOM


- In order to render a proper alert on the DOM
    - Borrow Bootstrap's Alert component
        - An Alert provides contextual feedback messages for typical user actions 
            - With the handful of available and flexible alert messages

        - An Alert utilizes the base class "alert"
            - Followed by a class that determines the background color e.g. "alert-primary"

        - Reference (https://getbootstrap.com/docs/5.3/components/alerts/)

    - On the <App /> component's mark-up
        - Declare the property "className" on the JSX element <div>

        - Assign the Bootstrap's classes "alert" and "alert-primary"

            import Alert from "./components/Alert";

            function App() {
                return (
                    <div className="alert alert-primary">
                        <Alert />
                    </div>
                );
            }

    - Save the changes
        - Renders the word "Alert" with a light-blue background and different font-face


- To make the <Alert /> component dynamic
    - It passes the content as a prop or input to the component

    - Move back to the <Alert /> component (Alert.tsx)

    - Define the interface of the component using Props
        - Declare a prop named "text"
        - Data type of string

            interface Props {
                text: string;
            }

    - On the arrow function of <Alert /> component
        - Destructure the input object returned by the interface
        - Pass the "{ text }: Props" as argument value

            const Alert = ({ text }: Props) => {
                ...
            }

    - In the JSX mark-up
        - Replace "Alert" embedded between the JSX element <div> with "{text}"

            return <div>{text}</div>;

        - Save the changes

    - Switch back to the <App /> component
        - Declare the property "text" on the <Alert /> component

        - Assign the static string "Hello World!" as value 

            <div className="alert alert-primary">
                <Alert text="Hello World!" />
            </div>

    - Save the changes
        - The content "Hello World!" rendered on the DOM

        - This way of passing content or text to the <Alert /> component is ugly 
            - It is a concern if the content is long or contains HTML mark-up

        - To address this concern
            - Pass the content to the <Alert /> component as a "child"
            
            - To use the <Alert /> component like a HTML tag

                <Alert>
                    Hello World
                </Alert>


- To make the <Alert /> component accept content as a "child" instead of using a prop
    - Move back to the <Alert /> component (Alert.tsx)

    - Refactor <Alert /> component's interface
        - Replace the prop "text"

        - With a built-in property named "children"
        
        - NOTE: This is supported by ALL React components

            interface Props {
                children: string;
            }

    - On the arrow function of <Alert /> component
        - Replace the prop "text" with "children"

            const Alert = ({ children }: Props) => {
                ...
            }

    - On the JSX mark-up
        - Replace "{text}" with "{children}"

            return <div>{text}</div>;

    - Save the changes

    - Switch back to the <App /> component
        - Refactor the JSX mark-up

        - Replace <Alert /> with <Alert> </Alert>
            - Embed the text content in-between

            <div className="alert alert-primary">
                <Alert>Hello World!</Alert>
            </div>

    - Save the changes
        - The content "Hello World!" rendered on the DOM


- To pass content containing HTML mark-up as a child to the <Alert /> component
    - Move back to the <Alert /> component (Alert.tsx)

    - Refactor <Alert /> component's interface
        - Change the data type of the prop "children" from string to "ReactNode"

            interface Props {
                children: ReactNode;
            }

    - Save the changes

    - Switch back to the <App /> component
        - Refactor the JSX mark-up

        - Add HTML mark-up on the content that is passed to the <Alert /> component

            <div className="alert alert-primary">
                <Alert>
                    <h1>Hello World!</h1>
                </Alert>
            </div>

    - Save changes
        - The content "Hello World!" rendered using the <h1> tag on the DOM
