Controlled Components
---------------------
- There is another way of getting the values of the input fields in a form
    - Instead of using the Reference Hook (i.e. "useRef()")
        - Use State Hook (i.e. "useState()")

    - Declare a State Hook
        - Define the properties of the state object
        - Save the deconstructed object & set function to their respective constant variables

    - On the component's JSX mark-up
        - Declare the property "onChange" on the JSX element <input>
            - This "event" gets triggered whenever the user types something on the input field
       
        - Assign an anonymous arrow function as value
            - Declare a parameter variables named "event"
                - Captures the triggered event
                - Returns the "event.target" (i.e. JSX element <input>)
                    - Use the property "value" to access the value typed by the user

            - Calls the set function of the declared State Hook
                - Use the spread operator (...) on the existing state object
                
                - Followed by the targeted property to be updated
                     - Assign the corresponding value from "event.target.value"

                - NOTE: The property "value" returns a string data type
                    - Use the function "parseInt()" to convert a value of string to number

    - On the component's Event Handler
        - Pass the state object to the "console.log()"
            - To display the content of the state object
            - Simulating a form submission to a remote server


- A caveat of using State Hook over Reference Hook
    - Every time the user types or removes a character on or from the JSX element <input>
        - It triggers a state update
        - As a result, React re-renders the component

        - For most cases, this is NOT an issue
            - To some developers it is an issue 
            - Claims that this approach of using State Hook is slow
            - Recommends using Reference Hook instead

        - Remember that "Premature optimization is the root of all evil!" -- Donald Knuth
            - Do NOT believe such hardcore recommendations heard on the internet
            - Use your own judgement
            
            - If you have a complex form with a lot of element
                - Observed performance issues using State Hook
                - Then use Reference Hook instead
            

- There is a tiny problem with this implementation
    - Each JSX element <input> has a property named "value"
        - That is used for maintaining their own state
    
    - The State Hook also has a state variable
        - That stores the current state

    - It is possible that these sources get out-of-sync
        - To solve this problem
        - Is to make React (not the DOM) the "single source of truth"

    - To make React as the "single source of truth"
        - On the property "value" of the JSX element <input>
            - Assign as value the state object and corresponding property name
        
        - Now this element ALWAYS relies on the value stored in the State Hook's state variable

    - This JSX element <input> is now referred as a "Controlled Component"
        - Because the element's state is ENTIRELY controlled by React
        
        - This means that the property "value" of the JSX element <input> is NOT managed by the DOM
            - But it is stored and updated on the component's state (c/o the State Hook)


- In the example code
    - Open the <Form /> component (Form.tsx)
        - Remove the implement Reference Hook from the previous section's example

    - Declare a State Hook
        - Define a state object with the following properties
            - name  = intially set to an empty string
            - age   = intially set to 0

        - Descontruct the state object into its state variable and set function

            const [person, setPerson] = useState({
                name: "",
                age: 0,
            });

    - On the component's JSX mark-up
        - Declare the property "onChange" on the JSX element <input> with an property "id" set to "name"

        - Assign an anonymous arrow function as value

            <input onChange={() => {}} id="name" type="text" className="form-control" />

        - Declare the parameter variable named "event"

            <input onChange={(event) => {}} id="name" type="text" className="form-control" />

        - Inside the arrow function
            - Call the set function "setPerson()"
                - Pass a new object as an argment value

            - Inside the new object
                - Copy the current state object using the spread operator (...)
                - Followed by the property "name"
                - Assigned with "event.target.value"

                <input
                    onChange={(event) =>
                        setPerson({ ...person, name: event.target.value })
                    }
                    id="name"
                    type="text"
                    className="form-control"
                />

        - Repeat the same on the JSX element <input> with an property "id" set to "age"

                <input
                    onChange={(event) =>
                        setPerson({ ...person, age: event.target.value })
                    }
                    id="age"
                    type="number"
                    className="form-control"
                />

            - NOTE: The property "age" of the state object triggered a TypeScript compilation error
                - Type "string" is not assignable to type "number"

            - To address this concern
                - Pass the "event.target.value" as argument value to the function "parseInt()"

                <input
                    onChange={(event) =>
                        setPerson({ ...person, age: parseInt(event.target.value) })
                    }
                    id="age"
                    type="number"
                    className="form-control"
                />        

    - On the component's Event Handler
        - Pass the state variable "person" as argument value to "console.log()"

    - Save the changes
        - Vite reloads the React application

        - Displays the user-input from the form's "Name" and "Age" fields
            - On the browser's JavaScript console
    
    - To make React as the "single source of truth" 
        - On the JSX element <input> with an property "id" set to "name"
            - Declare the property "value"
            - Assign as value the state object "person" and its property "name" (i.e. "person.name")

                <input
                    onChange={(event) =>
                        setPerson({ ...person, name: event.target.value })
                    }
                    value={person.name}
                    id="name"
                    type="text"
                    className="form-control"
                />

        - On the JSX element <input> with an property "id" set to "age"
            - Declare the property "value"
            - Assign as value the state object "person" and its property "age" (i.e. "person.age")

                <input
                    onChange={(event) =>
                        setPerson({ ...person, age: parseInt(event.target.value) })
                    }
                    value={person.age}
                    id="age"
                    type="number"
                    className="form-control"
                />

        - NOTE: Both JSX element <input> are now referred as a "Controlled Component"
            - These elements are NOT controlled by the DOM anymore
            - But rather by React instead

    - Save the changes
        - Vite reloads the React application

        - NO visual difference from the recent save