Applying Validation
-------------------
- Applying validation roles in React Hook Form
    - To set rule(s) for the input typed by users on JSX element <input>
    - Then triggers a corresponding error when the rule(s) is/are NOT met


- To implement validation on a component's registered JSX element <input>
    - On the object that calls the function "register()"

    - Pass a new blank object as a 2nd argument value to the function "register()"

    - Inside the blank object
        - Add standard HTML attributes for form data validation (e.g. required, minLength)

            <input {...register("name", { required: true, minLength: 3})} .../>

        - Submitting the form without satisfying the validation rule(s)
            - React Hook Form will NOT call the handler function 
            - Responsible for submitting the form


    - To show the error message to the user
        - Pull the function "formState()" from the custom function/hook "useForm()"

            const { register, handleSubmit, formState } = useForm();

        - The function "formState()" returns an object
            - Filled with properties related to error-handling (e.g. "errors")

        - The property "errors" of the returned object
            - Returns an object with the following properties
                - "<key>"   = assigned key to the registered JSX element <input>
                - "ref"     = references the JSX element <input>
                - "type"    = HTML attribute validation that is violated

            - This object is used to show validation errors to the user

        - Perform a nested destructuring on the returned object by the function "formState()"
            - Grab the property "errors"

            const { register, handleSubmit, formState: {errors} } = useForm();

        - Below the registered JSX element <input> with the property "id" of "name"
            - Declare an object

            - Inside the object
                - Add a logical && operation
                - When truthy display the corresponding error message            

            - Use the Bootstrap class "text-danger" to color the error message in Red

            - NOTE: Declare a separate object and logical && operation for each error message

        - All of these functionality is baked within the React Hook Form library


- To make the TypeScript compiler aware of the registered JSX element <input>
    - Define the interface of the form object returned by the function "useForm()"

    - Define the interface on the line prior to calling the function "useForm()"       
        - Name the interface "FormData"

        - Declare the following properties
            - name  = type "string"
            - age   = type "number"

            interface FormData {
                name: string;
                age: number;
            }

    - Insert the interface <FormData> in-between the function "useForm" & its ()

        const { register, handleSubmit,  formState: { errors }, } = useForm<FormData>();

    - Save the changes
        - Vite reloads the React application
        - No visual change 


- In the example code
    - Open the <Form /> component (Form.tsx)

    - On the register JSX element <input> with the property "id" of "name"
        - Pass a new object as a 2nd argument value to the function "register()"

        - Inside the object, declare the standard HTML attributes for form data validation
            - Property "required" set to true
            - Property "minLength" set to 3

            <input
                {...register("name", { required: true, minLength: 3 })}
                id="name"
                type="text"
                className="form-control"
            />

        - Save the changes
            - Vite reloads the React application

            - Submitting the form without satisfying the validation rule(s)
                - React Hook Form will NOT call the handler function "onSubmit()"
                - Until all of the validation rules have been satisfied
    

    - To show the validation error message(s) to the user
        - Pull the function "formState()" from the custom function/hook "useForm()"

            const { register, handleSubmit, formState } = useForm();

            - The function "formState()" returns an object
            - Filled with properties related to error-handling (e.g. "errors")

        - Perform a nested destructuring on the object returned by "formState()"
            - Pull the property "errors"
            - To have access to its returned object

            const { register, handleSubmit, formState: {errors} } = useForm();

        - After the registered JSX element <input> with the property "id" of "name"
            - Declare a blank object

            - Inside declare a Logical && operation
                - If the returned object from "error" thas the property
                    - "key" is NOT null
                    - "type" === "required" 
                - Then display the corresponding error message
                - Otherwise do nothing

            <input
                {...register("name", { required: true, minLength: 3 })}
                id="name"
                type="text"
                className="form-control"
            />

            { errors.name?.type === "required" && <p>The name field is required.</p> }

            - NOTE: The "?" between properties <key> (i.e. "name") and "type"
                - This is referred as "Optional Chaining" in JavaScript
                - The expression is ONLY evaluated if the value in <key> is NOT empty
                - Otherwise, the entire expression is ignored

            
            - Declare a separate logical && operation for "minLength" validation violation

            <input
                {...register("name", { required: true, minLength: 3 })}
                id="name"
                type="text"
                className="form-control"
            />

            { errors.name?.type === "required" && <p>The name field is required.</p> }
            { errors.name?.type === "minLength" && <p>The name must at least be 3 characters.</p> }

        - Make the corresponding error messages colored in Red
            - On the JSX element <p> of the error message
            - Declare the property "className"
            - Assign the Bootstrap class "text-danger"

            {errors.name?.type === "required" && (
                <p className="text-danger">The name field is required.</p>
            )}
            
            {errors.name?.type === "minLength" && (
                <p className="text-danger">The name must at least be 3 characters.</p>
            )}
        
        - Save the changes
            - Vite reloads the React application

            - Submitting the form without any input in the Name field
                - Displays the error message "The name field is required."
                - The error message is colored in Red

            - Submitting the form with input of less than 3 characters in the Name field
                - Displays the error message "The name must at least be 3 characters."
                - The error message is colored in Red

            - Submitting the form with validation rules fulfilled
                - React Hook Form calls the function "onSubmit" to "submit" the form data

    - To make the TypeScript compiler aware of the registered JSX element <input>
        - Define the interface of the form object returned by the function "useForm()"

        - On the line prior to calling the function "useForm()"       
            - Name the interface "FormData"

            - Declare the following properties
                - name  = type "string"
                - age   = type "number"

            interface FormData {
                name: string;
                age: number;
            }

        - Insert the interface <FormData> in-between the function "useForm" & its ()

            const { register, handleSubmit,  formState: { errors }, } = useForm<FormData>();

        - Save the changes
            - Vite reloads the React application

            - No visual changes in the DOM

            - TypeScript compiler is now aware of the registered JSX element <input>
                - When accessing the returned object "errors"
                - TypeScript compiler is now aware of the "keys" 
                    - Of the registered JSX element <input>
                    - Evident on the auto-completion menu when typing "errors."
                    