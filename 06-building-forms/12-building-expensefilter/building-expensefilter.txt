Building ExpenseFilter
----------------------
- The next component to build for the mini-project "Expense Tracker" is the <ExpenseFilter /> component
    - This component is solely responsible for showing category filters

    - NOTE: The act of filtering is one on the <App /> component (App.tsx)
        - This is the component that maintains the state

        - When the user selects a "category" filter in the <ExpenseFilter /> component
            - It notifies the <App /> component

            - The <App /> component performs the act of filtering the dummy data
                - Then rendering them on the DOM


- Open the folder "src/expense-list"
    - Create a new file named "ExpenseFilter.tsx"


- Inside the file "ExpenseFilter.tsx"
    - Use the shortcut "rafce" to generate component function boilerplate

    - On the component's JSX mark-up
        - Remove the JSX element <div>

        - Replace it with a JSX element <select> 
            - Declare the property "className"
            - Assign Bootstrap's class "form-select"

            const ExpenseFilter = () => {
                return <select name="" id="" className="form-select"></select>;
            };

        - Remove the properties "id" and "name"

            const ExpenseFilter = () => {
                return <select className="form-select"></select>;
            };        

        - Inside the JSX property <select>
            - Declare the four (4) categories using the JSX element <option>
            
            - NOTE: For now, these items are hard-coded

            const ExpenseFilter = () => {
                return (
                    <select className="form-select">
                        <option value="">All categories</option>
                        <option value="Groceries">Groceries</option>
                        <option value="Utilities">Utilities</option>
                        <option value="Entertainment">Entertainment</option>
                    </select>
                );
            };
                    

    - Define the "shape" of the Props using an interface
        - Declare the property "onSelect"
        - Set it with an anonymous arrow function

        - On the arrow function
            - Declare a paramter variable named "category"
            - Data type of "string"

        - Inside the arrow function
            - Returns "void"

        interface Props {
            onSelectCategory: (category: string) => void;
        }

    - On the component's function declaration
        - Pass Props as an argument value
        - Deconstruct the property "onSelectCategory"

        const ExpenseFilter = ({ onSelectCategory }: Props) => {
            return (
                ...
            );
        };
    
    - On the JSX element <select>
        - Declare the property "onChange"
        - Set it to an anonymous arrow function

        - On the arrow function
            - Declare a parameter variable named "event"

        - Inside the arrow function
            - Call the property "onSelectCategory()"
            - Pass "event.target.value" as an argument value to "onSelectCategory()"

            return (
                <select
                className="form-select"
                onChange={(event) => onSelectCategory(event.target.value)}
                >
                    ...
                </select>
            )


- Open the <App /> component (App.tsx)