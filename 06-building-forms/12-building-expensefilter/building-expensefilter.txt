Building ExpenseFilter
----------------------
- The next component to build is the <ExpenseFilter />
    - This is solely responsible for showing category "filters"
        - NOT the act of filtering the list of items (i.e. expenses)

    - The act of "filtering" is performed by the <App /> component (App.tsx)
        - As this component maintains the state of the application

    - When a user selects a category in the <ExpenseFilter /> component
        - This component notifies a change of state to the <App /> component

    - The <App /> component then performs the filtering of the dummy data
        - Passes the "filtered" list of items to the <ExpenseList /> component

    - The <ExpenseList /> component renders the filetered list of items in the DOM


- To create the new component <ExpenseFilter />
    - Open the folder "src/expense-tracker/components"

    - Create a new file named "ExpenseFilter.tsx"

    - Use the shortcut "rafce"
        - To generate the component function boilerplate code



- On the <ExpenseFilter /> component's mark-up
    - Remove the generated JSX element <div>

    - Replace it with a JSX element <select>
        - Declare the property "className"
            - Assign the Bootstrap class "form-select"

        - Remove the properties "name" and "id"

        const ExpenseFilter = ({ onSelectCategory }: Props) => {
            return <select className="form-select"></select>;
        };


- Inside the JSX element <selec>
    - Add four (4) JSX elements <option>
    
    - Assign the following as a value to the property "value" & content of the JSX element
        - "" for "All"
        - "Groceries" for "Groceries"
        - "Utiltiies" for "Utilities"
        - "Entertainment" for "Entertainment"
    
        - NOTE: The value are intentionally hard-coded for now

        return (
            <select className="form-select">
                <option value="">All</option>
                <option value="Groceries">Groceries</option>
                <option value="Utilities">Utilities</option>
                <option value="Entertainment">Entertainment</option>
            </select>
        );


- In order for the <ExpenseFilter /> to inform the <App /> when a change of state occurred
    - Define the shape of the <ExpenseFilter /> component's properties (Props) using interface

    - Add a property named "onSelect"
        - Assign an anonymous arrow function as value

    - On the arrow function
        - Declare the parameter variable named "category" of data type "string"

        - The variable "category" stores the user-selected category
            - The value is returned by the arrow function (yet to be defined)
            - That is assigned as value to the property "onChange" of the JSX element <select>

    - Inisde the arrow function
        - Returns void

        interface Props {
            onSelectCategory: (category: string) => void;
        }

    - Add the Props as an argument value to the component's function declaration
        - Deconstruct the property "onSelectCategory"

        const ExpenseFilter = ({ onSelectCategory }: Props) => {
            return (
                ...
            );
        };

    - On the JSX element <select>
        - Declare the property "onChange"
            - Assign an anonymous arrow function as value

            <select className="form-select" onChange={() => {}}>

        - On the arrow function
            - Declare the parameter variable named "event"
                - This variable holds the object "event"

            - The object "event" has a property named "target"
                - It returns the selected (clicked) JSX element in the DOM

        - Inside the arrow function
            - Call the property "onSelectCategory" like a function
            - Pass the "event.target.value" as an argument value to "onSelectCategory()"

                <select
                    className="form-select"
                    onChange={(event) => onSelectCategory(event.target.value)}
                    >
                    <option value="">All</option>
                    <option value="Groceries">Groceries</option>
                    <option value="Utilities">Utilities</option>
                    <option value="Entertainment">Entertainment</option>
                </select>

            - NOTE: The property "value" of the object "event.target"
                - Returns the corresponding value assigned to the property "value" 
                - Of the selected (clicked) JSX element <option>

                    <option value="">All</option>
                    <option value="Groceries">Groceries</option>
                    <option value="Utilities">Utilities</option>
                    <option value="Entertainment">Entertainment</option>


- Open the <App /> component (App.tsx)
    - Import the <ExpenseFilter /> component

        import ExpenseFilter from "./expense-tracker/components/ExpenseFilter";
    
    - In the component's JSX mark-up
        - Add the <ExpenseFilter /> component above the <ExpenseList />

            return (
                <div>
                <ExpenseFilter />

                <ExpenseList
                    expenses={expenses}
                    onDelete={(id) => setExpenses(expenses.filter((e) => e.id !== id))}
                />
                </div>
            );

    - On the <ExpenseFilter /> component
        - Set the property "onSelectCategory"
            - Assign an anonymous arrow function

        - On the arrow function
            - Add the parameter variable named "category"
            - This contains an object regarding the selected category

        - Inside the arrow function
            - Pass the value of the parameter variable "category" to "console.log()"

            <ExpenseFilter onSelectCategory={(category) => console.log(category)} />

        - Save the changes
            - Vite reloads the React application
            
            - The <ExpenseFilter /> component is rendered in the DOM
                - Just above the <ExpenseList /> component

            - Selecting a "category" from the list
                - Displays the corresponding value taken from the property "value"
                - Of the selected JSX element <option> in the browser's JavaScript console

            - NOTE: the <ExpenseFilter /> component is too close to the <ExpenseList />

        - To address this concern
            - Add a JSX element <div>
                - Declare the property "className"
                - Assign Bootstrap class "mb-3" as value
                - NOTE: "mb-3" translates to "margin-bottom: 3px"

            - Move the <ExpenseFilter /> component into the JSX element <div>

                <div className="mb-3">
                    <ExpenseFilter onSelectCategory={(category) => console.log(category)} />
                </div>

        - Save the changes
            - Vite reloads the React application
            
            - The <ExpenseFilter /> component is now propperly spaced from the <ExpenseList />


- To implement the action of filtering in the <App /> component
    - Requires another state variable to represent the selected "filter" category
        - When the value of the "filter" changes
        - The <App /> component will be rendered
        - Then list passed to the <ExpenseList /> component will be updated

    - Create a state variable and its corresponding set / update function using State Hook
        - Call the function "useState()"
            - Pass an empty string as an argument value

        - Save the returned object to a constant
            - Desconstruct the returned object
            - Pull the state variable and name it "selectedCategory"
            - Pull the set / update function and name it "setSelectedCategory"

            const [selectedCategory, setSelectedCategory] = useState("");

    - When a user selects a category from the <ExpenseFilter /> component
        - The arrow function assigned as value to the property "onSelectCategory" is called

        - Instead of logging the selected "category" to the browser's JavaScript console
            - Calls the set / update function "setSelectedCategory()" is called
            - Pass the parameter variable "category" as an argument value

                <div className="mb-3">
                    <ExpenseFilter
                        onSelectCategory={(category) => setSelectedCategory(category)}
                    />
                </div>

        - When a user selects a category
            - The state will be updated
            - The component <App /> is re-rendered 
            - The updated list sent to the <ExpenseList /> component is next
    
    - On the <ExpenseList /> mark-up
        - Instead of passing the state variable "expense" as value
            - To the property "expenses" of the <ExpenseList /> component
            - Pass a "filtered" list instead

        - To create a "filtered" list
            - Declare a constant named "visibleExpenses"
                - Assign a ternary expression as value

            - The ternary expression checks
                - If the state variable "selectedCategory" is truthy
                - NOTE: the state variable is initially assigned with an empty string (e.g. falsy)

            - If the truthy
                - Calls the method ".filter()" on the state variable "expenses"
                - Pass an anonymous arrow function as an argument value to the method ".filter()"

                - In the arrow function
                    - Declare a parameter variable "e" (an expense object)

                - Inside the arrow function
                    - Check if the property "category" of "e" is strictly equal
                    - To the state variable "selectedCategory"
                    - Returns a list items based on the value in the state variable "selectedCategory"
            
            - Otherwise (NOT truthy or the user has NOT selected a category yet)
                - Assign the state variable "expenses" to the constant "visibleExpenses"
                    - Renders all of the items stored in the state variable "expenses"

                const visibleExpenses = selectedCategory
                    ? expenses.filter((e) => e.category === selectedCategory)
                    : expenses;

        - Assign the constant "visibleExpenses" as a value to the property "expenses"
            - Of the <ExpenseList /> component

                <ExpenseList
                    expenses={visibleExpenses}
                    onDelete={(id) => setExpenses(expenses.filter((e) => e.id !== id))}
                />

        - Save the changes
            - Vite reloads the React application

            - When the user selects a category from the <ExpenseFilter /> component
                - The <App /> component receives a state update
                - The <App /> component re-renders itself
                - Pass an updated state variable "expenses" to the <ExpenseList /> component
                - The <ExpenseList /> component renders an updated list in the DOM
