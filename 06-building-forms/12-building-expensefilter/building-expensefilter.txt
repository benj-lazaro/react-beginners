Building ExpenseFilter
----------------------
- Building the <ExpenseFilter /> component
    - This component is responsible for show filters
    
    - It filters displayed expenses by category
        - NO category selected meant rendering all expenses


- In the folder "components"
    - Create a new file named "ExpenseFilter.tsx"

    - This component returns a <select> element
        - Contains <option> elements with hard-coded categories (for now)


- The act of filtering is implemented at the <App /> component
    - This is where the state is maintained

    - Need to define the shape of the <ExpenseFilter /> component's Props
        - Property name "onSelectCategory"
        - Assigned with a function
            - Defined with a parameter variable "category" of type "string"
            - The function returns void

    - Pass the Props object as argument value to the <ExpenseFilter /> component

    - Add the attribute attribute "onChange" to the JSX mark-up <select>
        - Assign an anonymous callback function
        - The function accepts an "event" as argument value
        
        - Calls the Props' "onSelectCategory()" function
            - Passing "event.target.value" as argument value
        
        - This returns the selected "value" of the corresponding <option> element


- Import the <ExpenseFilter /> in the <App /> component

    import ExpenseFilter from "./expense-tracker/components/ExpenseFilter";


- Place the <ExpenseFilter /> component inside a <div> element
    - The attribute "className" assigned with the value "mb-3" (Bootstrap class)
        - Implements a "margin-bottom" of 3px to the <div> element

    - Located just above the <ExpenseList /> component

    - Set the "onSelectCategory" Props to an anonymous callback function
        - It accepts an object named "category"
            - Which holds the returned value from the <ExpenseFilter /> Props
        
        - Then displays the content of the "category" object on the console

        <div className="mb-3">
            <ExpenseFilter onSelectCategory={(category) => console.log(category)} />
        </div>


- In the <App /> component
    - Define a state variable for selecting the represented filter
        - When the filter changes
        - The <App /> component will re-render
        - The list of expenses be updated
    
    - Refactor <ExpenseFilter /> component's attribute "onSelectCategory"
        - Instead of displaying the content of the object "category"
        - It calls the state function "setSelectedCategory()"
        - Pass the object "category" as an argument value
    
    - Create a local constant named "visibleExpenses"
        - Assign a ternary expression

        - Call the method ".filter()" on the object "expenses"

        - Pass an anonymous function to the ".filter()" method
            - The function passes the object "e" (i.e. expenses) as argument value
        
        - Check if values of property ".category" and state variable "selectedCategory" are equal
            - If truthy returns the value of "selectedCategory"
                - Renders ONLY the expenses revelant to the selected category

            - Otherwise returns the object "expenses"
                - Renders all expenses

        const visibleExpenses = selectedCategory
            ? expenses.filter((e) => e.category === selectedCategory)
            : expenses;

    - Refactor <ExpenseList /> component's "expenses" Props
        - Pass the returned value of "visibleExpenses"

        <ExpenseList
            expenses={visibleExpenses}
            onDelete={(id) => setExpenses(expenses.filter((e) => e.id !== id))}
        />