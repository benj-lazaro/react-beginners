Choosing the State Structure
----------------------------
- A few best practices on choosing the state structure 


- Avoid redundant state variables
    - If a value to be rendered can be computed (i.e. derived) from existing state variables
        - Declare a constant
        - Store the computed values
        - Then render the constant's value on the component's JSX mark-up

            // State hook variables firstName & lastName
            const [firstName, setFirstName] = useState("John");
            const [lastName, setLastName] = useState("Wick");

            const fullName = firstName + " " + lastName;

            return <div>{fullName}</div>;


- For multiple state variables that are related 
    - It is better to group them inside an object
        - Assign the object to a state variable 
        - Render the state variable on the component's JSX mark-up

            // State hook on username
            const [person, setPerson] = useState({
                firstName: "John",
                lastName: "Wick",
            });

            // State hook on page loading
            const [isLoading, setLoading] = useState(false);

            return (
                <div>
                    {person.firstName} {person.lastName}
                </div>
            );


    - NOTE: Avoid using deeply nested structures (e.g. object)
        - They are hard to update
        - Prefer to use a flat (i.e. single-level) structure

            // State hook on username using deeply nested structure
            const [person, setPerson] = useState({
                firstName: "John",
                lastName: "Wick",
                contact: {
                    address: {
                        street: ""
                    }
                }
            });

            // State hook on page loading
            const [isLoading, setLoading] = useState(false);

            return (
                <div>
                    {person.firstName} {person.lastName}
                </div>
            );
