Understanding State Hook
------------------------
- State hooks adds state to a React component


- React updates a state asynchronously (i.e. NOT immediately)
    - This is done for performance reasons
        - Due to handling multiple state variables
    
    - React takes all of the state updates & batches them
        - Applies the state updates at a later time (i.e. Event Handler)
    
    - After an Event Handler finishes its execution
        - React applies state updates all at once
        - Then re-renders the component with an updated state


- When using the State hook
    - The state variables are actually created & stored outside of the component in memory
    
    - A local variable declared inside a component
        - That variable is scopled within that component
    
    - When the component finishes execution
        - The local variable is removed from memory
    
    - The next time the component is rendered again in the DOM
        - The local variable is re-initialized

    - With a state variable
        - The value or "state" is stored outside of the component & in memory

        - The variable is automatically removed
            - When the associated component is NO longer displayed in the DOM


- Use State hooks at the top-level of a React component
    - The state variables are local identifiers in a component

    - React is NOT aware of the state variables' names
    
    - When using State hook, it tells React to
        - Store the initial values of the state variables
        - Most likely inside an array

    - The next time React re-renders a component
        - It looks inside at the array 
        - Then grabs a value and store in the corresponding state variable
        
        - NOTE: React relies on the of the array's elements
        - In order to properly map the value(s) to the corresponding state variable

        - This is the reason why State hooks can NOT be used in
            - Conditional statements (e.g. if-else)
            - Loops (e.g for loops)
            - Nested functions

        - These constructs impacts the order in which the State hook variables are called

        - To ensure a consitent order
            - Call State hooks at the top-level of a component

